***************
Getting started
***************

All instructions assume that you are working within the :term:`virtualenv`
you already created. For convenience, run the following command so as
to use the tools that are installed in that environment::

    source $VENV/bin/activate


greeting the world
==================

Let's dive right in:

.. literalinclude:: src/01.py

Run that code, then visit http://localhost:8080,
which should display the famous greeting in your web browser.

Now, read the code and try to make sense of what's going on.
It's about the most simple Pyramid app possible.


serving the app
===============

.. sidebar:: WSGI (Web Server Gateway Interface)

   A Python standard that defines an interface between web
   servers and Python web applications.
   It is the most common such interface in the Python world;
   all Pyramid apps are WSGI apps.

Let's go through it:

.. literalinclude:: src/01.py
   :lines: 20-23

- We call ``main()``, which returns a :term:`WSGI` app.

- We use :func:`~wsgiref.simple_server.make_server` to create a WSGI server.

- ``0.0.0.0`` means this server listens on all configured interfaces;
  this means that the app, found on port ``8080``,
  will be reachable by all machines that can reach the host.
  If we used ``127.0.0.1`` instead, only the host would reach the app. [#]_

- ``serve_forever`` method keeps the server running until the Python process
  is killed.

Okay, that was a mouthful, especially for a mere 3 lines of code.


creating and configuring the app
================================

Let's see what happens in the ``main`` function:

.. literalinclude:: src/01.py
   :lines: 13-17

- We create a :class:`~pyramid.config.Configurator` instance.
  As the name implies, this is what we use to configure our app,
  as you will soon see.

- We add a route to our configuration, giving it some arbitrary name.

.. TODO: 'route' needs a better explanation

- The second argument to that ``add_route`` method, ``'/'``,
  is a matching pattern.
  In this case it represents the root path (http://localhost:8080/).
  If you used ``/greets`` instead,
  you would need to visit http://localhost:8080/greets to see what you
  saw earlier on... ``Hello World!``.

- :meth:`~pyramid.config.Configurator.scan` scans for objects
  marked with configuration decoration,
  which in our case is ``@view_config`` (*line 8* on the script).

- In the end, we finally create (and return) the :term:`WSGI` app.

.. TODO: 'scan' needs a better explanation

It does not seem to be getting easier does it?
And we are not even done yet, but let's not give in just yet.


the View
========

.. literalinclude:: src/01.py
   :lines: 8-10

- This decorator indicates that the function decorated is a View,
  a callable object that returns the results on the web page.

- Note the argument, which matches the name we gave the route (see *line 15*).
  This means that the View (aka :term:`View Callable`)
  will get invoked when the given path pattern matches,
  which in our case is the root path (``'/'``).

- The ``request`` object contains HTTP bits,
  and following is a result of inserting a ``print(request)`` so as to
  see its contents (out of curiosity):

  .. code-block:: text

     GET / HTTP/1.1
     Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
     Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
     Accept-Encoding: gzip,deflate,sdch
     Accept-Language: en-GB,en-US;q=0.8,en;q=0.6
     Cache-Control: max-age=0
     Connection: keep-alive
     Content-Length: 
     Content-Type: text/plain
     Host: localhost:8080
     User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.63 Safari/537.31


  You probably need to read a bit about HTTP stuff to fully digest all of that.

.. TODO: 'request' needs a better explanation

- We finally return (and therefore display) the famous greeting.
  I also did a ``print(Response('Hello World!'))``,
  just to see what it looks like:

  .. code-block:: text

     200 OK
     Content-Type: text/html; charset=UTF-8
     Content-Length: 12

     Hello World!


summary
=======

Basically, we create a WSGI app and serve it on a given port.
We do of course have to configure it,
things like what route pattern for which View (yes, we can have a few of each).
The View would then result in the desired displayed info on the browser.


.. [#] The ugly details are at :rfc:`5735`.
